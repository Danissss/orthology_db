
<div id="well-tree">
	<p id="_generate_tree">Click below to place your sequence in a Phylogenetic Tree using <a href="http://www.drive5.com/muscle/"> MUSCLE </a> and <a href="http://phylocanvas.org/">Phylocanvas</a></p>

	<%= form_with url:'/phylogenetic_tree', remote: true,  :html => {:id => "do-tree"} do |f| %>

		<%#<%= f.submit "Generate Phylogenetic Tree", :class => "btn btn-primary", id: "generate-phylogenetic-tree" %>
		<%= f.button 'Generate Phylogenetic Tree'.html_safe, :type => :submit, id: "generate-phylogenetic-tree", :class => "btn btn-primary" %>
		<!-- <div id="waiting-gif"></div> -->
	<% end %>


	<img id="waiting-gif" src="/assets/loading.gif" style="visibility:hidden;">
	<div id="phylocanvas"></div>
	<p id="graph-note"></p>

</div>

<!-- they also want to color the rd group -->
<script>
	// sample data: (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F
	var create_phylocanvas = function phylocanvas(data,highlight,data_group, group_number) {
		var tree = Phylocanvas.createTree('phylocanvas');
		// tree.setTreeType('rectangular');
		tree.setTreeType('circular');

		// auto generate #of group color
		// var group_number_int = parseInt(group_number)
		// var color_pool = [];
		// var color_hash = {};
		// for (var i = 0; i <= group_number_int; i++){
		// 	var random_color = getRandomColor();
		// 	while (color_pool.includes(random_color) == false){
		// 		color_hash[i] = random_color;
		// 	}
		// }
		// // for each element in group, assign the color
		// for (var i = 0; i < data_group.length; i++) {
		// 	console.log(data_group[i]);
		// 	// tree.setNodeColourAndShape(data_group[i], color_group[data_group[i]], "x", 5);
		// }


				// phylocanvas = new PhyloCanvas.Tree('phylocanvas', { historyCollapsed : true });
		  //   phylocanvas.showLabels = true;
		  //   phylocanvas.hoverLabel = true;
		  //   phylocanvas.setTreeType('circular');
		  //   // phylocanvas.nodeAlign = false;
		  //   // phylocanvas.setTreeType('rectangular');
		  //   phylocanvas.addListener('loaded', getData);
		  //   phylocanvas.addListener('error', function(evt){
		  //       alert(evt.message);
		  //   });

		 tree.showLabels = true;
		 tree.hoverLabel = true;


		tree.load(data);
		var re = new RegExp(highlight);
		var leaves = tree.findLeaves(re);
		// require check the sequence header to make sure it doesn't have duplicates
		if (leaves[0] !== undefined ){
			leaves[0].highlighted = true;
			tree.fitInPanel(leaves);
		}




		tree.draw();


		tree.on('click', function (e) {
			var node = tree.getNodeAtMousePosition(e);
			if (node) {
				tree.redrawFromBranch(node);
			} else {
				tree.redrawOriginalTree();
			}
		});

	}
	// $(document).on({
	// 	ajaxStart: function() {

	// 		$("body").addClass("loading");
	// 		$('.loading').prepend('<img id="loading-image" src="/assets/loading.gif" />')

	// 	},
	// 	ajaxStop: function() {
	// 		$("body").removeClass("loading");
	// 		console.log("remove loading class");
	// 	}
	// });
	$('#do-tree').submit(function(e){
		e.preventDefault();
		var sequence = $('.seq-search-sequence').val();
		var form = $(this);
		$.ajax({
			type:"POST",
			url: "/phylogenetic_tree",
			// give the sequence back for generating new fasta file
			data: form.serialize() + '&sequence=' + sequence,
			beforeSend: function(){
				$('#generate-phylogenetic-tree').hide();
				$('#waiting-gif').removeAttr("style");
			},
			success: function(data){

				$('#waiting-gif').attr("style","visibility:hidden;");
				create_phylocanvas(data.tree, data.highlight, data.group, data.group_number);
				$('#graph-note').text("For more advanced graph viewer, plesase see");
				$('#graph-note').append("<a href='https://en.wikipedia.org/wiki/List_of_phylogenetic_tree_visualization_software' target='_blank'> Wiki </a>");

			},
			error: function(data){
				$("#submit-message").text(data.message_err);
			}
		})
	})

	function getRandomColor() {
		var letters = '0123456789ABCDEF';
		var color = '#';
		for (var i = 0; i < 6; i++) {
			color += letters[Math.floor(Math.random() * 16)];
		}
		return color;
	}


</script>
